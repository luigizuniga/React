{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","cat","divElement","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACRC,mBAAS,IADD,mBACtCC,EADsC,KAC1BC,EAD0B,KAgB9C,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAC,OAAMP,GAAN,mBAAqBO,OACrCN,EAAc,MAKlB,UACI,8CACA,4BAAKD,IACL,gCACI,uBAAOQ,KAAK,OACRC,MAAQT,EACRU,SApBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,gB,+BCPlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEqCC,UAAWH,GAFhD,6BACJ,oCADI,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAA0B,EAAvBJ,GAAwB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEvC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,WAEZ,CAACpB,IAEGqB,EDhBoBM,CAAc3B,GAAjCO,EAD6B,EAC7BA,KAAMa,EADuB,EACvBA,QAEd,OACI,eAAC,WAAD,WACI,6BAAMpB,IACJoB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEOT,EAAKE,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAAgCA,GAAbA,EAAIC,aEX9BiB,EAAe,WAAO,IAAD,EACQ1C,mBAAS,CAAC,KADlB,mBACvB2C,EADuB,KACV5C,EADU,KAG9B,OACI,eAAC,WAAD,WACI,8CACA,uBACD,cAAC,EAAD,CAAaA,cAAgBA,IAC5B,6BAEQ4C,EAAWpB,KAAI,SAAAqB,GAAG,OACf,cAAC,EAAD,CAEA9B,SAAW8B,GADLA,YCVvBC,G,MAAaC,SAASC,cAAc,UAE1CC,IAASC,OAAO,cAAC,EAAD,IAAmBJ,K","file":"static/js/main.e44c56d9.chunk.js","sourcesContent":["import React , { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [ inputValue, setInputValue ] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories( c => [ inputValue, ...c ]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h2>Add Category</h2>\n            <p>{ inputValue }</p>\n            <label>\n                <input type=\"text\"\n                    value={ inputValue }\n                    onChange={ handleInputChange  }\n                />\n            </label>\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGifs = async ( category ) => {\n    const apiKey = 'F5lvX58U4STuXT8YOaCaabLVkjiBefJm';\n    const url =  `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=${ apiKey }`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( { id , title, url } ) => {\n    // console.log(id, title, url);\n    return (\n        <div className=\"card\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React , { Fragment }from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs'; // Custom Hooks\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n    const { data, loading }  = useFetchGifs( category );\n\n    return (\n        <Fragment>\n            <h3>{ category }</h3>\n            { loading && <p>loading</p> }\n            <div className=\"card-grid\">\n                {\n                   data.map(img => (\n                    <GifGridItem key={ img.id } {...img}/>\n                   ))\n                }\n            </div>\n        </Fragment>\n    )\n}\n\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    // los useEffect no pueden ser async\n    // ya que esperan evento sincronos\n    useEffect(() => {\n        getGifs(category)\n            .then( imgs => {\n                setTimeout( () => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                }, 1500);\n            })\n    }, [category]);\n\n    return state;\n}","import React, { useState,Fragment } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n   const [ categories , setCategories ] = useState(['']);\n    // setCategories\n    return (\n        <Fragment>\n            <h2>GitExpertApp</h2>\n            <hr/>\n           <AddCategory setCategories={ setCategories }/>\n            <ol>\n                {\n                    categories.map(cat =>\n                       <GifGrid\n                       key={ cat }\n                       category={ cat }/>\n                    )\n                }\n            </ol>\n        </Fragment>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nconst divElement = document.querySelector('#root');\n\nReactDOM.render(<GifExpertApp />,  divElement );\n"],"sourceRoot":""}